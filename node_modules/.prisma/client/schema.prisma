generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model avaliacao {
  id                                      Int      @id @default(autoincrement())
  troca_id                                Int?
  avaliador_id                            Int?
  avaliado_id                             Int?
  nota                                    Int
  comentario                              String?
  data_avaliacao                          DateTime @db.Date
  usuario_avaliacao_avaliado_idTousuario  usuario? @relation("avaliacao_avaliado_idTousuario", fields: [avaliado_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuario_avaliacao_avaliador_idTousuario usuario? @relation("avaliacao_avaliador_idTousuario", fields: [avaliador_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  troca                                   troca?   @relation(fields: [troca_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model historico_troca {
  id         Int      @id @default(autoincrement())
  usuario_id Int?
  troca_id   Int?
  troca      troca?   @relation(fields: [troca_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuario    usuario? @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model livro {
  id                                     Int      @id @default(autoincrement())
  titulo                                 String   @db.VarChar(255)
  autor                                  String   @db.VarChar(255)
  descricao                              String?
  usuario_id                             Int?
  usuario                                usuario? @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  troca_troca_livro_oferecido_idTolivro  troca[]  @relation("troca_livro_oferecido_idTolivro")
  troca_troca_livro_solicitado_idTolivro troca[]  @relation("troca_livro_solicitado_idTolivro")
}

model mensagem {
  id                                        Int      @id @default(autoincrement())
  troca_id                                  Int?
  remetente_id                              Int?
  destinatario_id                           Int?
  conteudo                                  String
  data_envio                                DateTime @db.Date
  usuario_mensagem_destinatario_idTousuario usuario? @relation("mensagem_destinatario_idTousuario", fields: [destinatario_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuario_mensagem_remetente_idTousuario    usuario? @relation("mensagem_remetente_idTousuario", fields: [remetente_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  troca                                     troca?   @relation(fields: [troca_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model troca {
  id                                     Int               @id @default(autoincrement())
  solicitante_id                         Int?
  receptor_id                            Int?
  livro_solicitado_id                    Int?
  livro_oferecido_id                     Int?
  data_solicitacao                       DateTime          @db.Date
  data_conclusao                         DateTime?         @db.Date
  status                                 String            @db.VarChar(50)
  avaliacao                              avaliacao[]
  historico_troca                        historico_troca[]
  mensagem                               mensagem[]
  livro_troca_livro_oferecido_idTolivro  livro?            @relation("troca_livro_oferecido_idTolivro", fields: [livro_oferecido_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  livro_troca_livro_solicitado_idTolivro livro?            @relation("troca_livro_solicitado_idTolivro", fields: [livro_solicitado_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuario_troca_receptor_idTousuario     usuario?          @relation("troca_receptor_idTousuario", fields: [receptor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuario_troca_solicitante_idTousuario  usuario?          @relation("troca_solicitante_idTousuario", fields: [solicitante_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model usuario {
  id                                         Int               @id @default(autoincrement())
  nome                                       String            @db.VarChar(255)
  email                                      String            @unique @db.VarChar(255)
  senha                                      String            @db.VarChar(255)
  reputacao                                  Int?              @default(0)
  avaliacao_avaliacao_avaliado_idTousuario   avaliacao[]       @relation("avaliacao_avaliado_idTousuario")
  avaliacao_avaliacao_avaliador_idTousuario  avaliacao[]       @relation("avaliacao_avaliador_idTousuario")
  historico_troca                            historico_troca[]
  livro                                      livro[]
  mensagem_mensagem_destinatario_idTousuario mensagem[]        @relation("mensagem_destinatario_idTousuario")
  mensagem_mensagem_remetente_idTousuario    mensagem[]        @relation("mensagem_remetente_idTousuario")
  troca_troca_receptor_idTousuario           troca[]           @relation("troca_receptor_idTousuario")
  troca_troca_solicitante_idTousuario        troca[]           @relation("troca_solicitante_idTousuario")
}
